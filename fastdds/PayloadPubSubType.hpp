// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PayloadPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _PAYLOAD_PUB_SUB_TYPE_HPP_
#define _PAYLOAD_PUB_SUB_TYPE_HPP_

#include <fastdds/dds/core/policy/QosPolicies.hpp>
#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastdds/rtps/common/InstanceHandle.h>
#include <fastdds/rtps/common/SerializedPayload.h>
#include <fastdds/utils/md5.h>

#if !defined(GEN_API_VER) || (GEN_API_VER != 2)
#error \
    Generated HelloWorld is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif // GEN_API_VER

namespace utility {

/*!
 * @brief This class represents the TopicDataType of the type HelloWorld defined
 * by the user in the IDL file.
 * @ingroup HelloWorld
 */
class PayloadPubSubType : public eprosima::fastdds::dds::TopicDataType {
public:
  eProsima_user_DllExport PayloadPubSubType() {
      m_typeSize = 1024;
  }

  eProsima_user_DllExport ~PayloadPubSubType() override {
    if (m_keyBuffer != nullptr) {
      free(m_keyBuffer);
    }
  }

  eProsima_user_DllExport bool
  serialize(const void *const data,
            eprosima::fastdds::rtps::SerializedPayload_t *payload,
            eprosima::fastdds::dds::DataRepresentationId_t data_representation)
      override {
    return payload->copy(
        static_cast<const eprosima::fastdds::rtps::SerializedPayload_t *>(data),
        false);
  }

  eProsima_user_DllExport bool
  serialize(const void *const data,
            eprosima::fastdds::rtps::SerializedPayload_t *payload) override {
    return serialize(data, payload,
                     eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
  }

  eProsima_user_DllExport bool
  deserialize(eprosima::fastdds::rtps::SerializedPayload_t *payload,
              void *data) override {
    return static_cast<eprosima::fastdds::rtps::SerializedPayload_t *>(data)
        ->copy(payload, false);
  }

  eProsima_user_DllExport std::function<uint32_t()>
  getSerializedSizeProvider(const void *const data,
                            eprosima::fastdds::dds::DataRepresentationId_t
                                data_representation) override {
    return [](void) -> uint32_t { return 0; };
  }

  eProsima_user_DllExport std::function<uint32_t()>
  getSerializedSizeProvider(const void *const data) override {
    return getSerializedSizeProvider(
        data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
  }

  eProsima_user_DllExport bool
  getKey(const void *const data,
         eprosima::fastdds::rtps::InstanceHandle_t *ihandle,
         bool force_md5 = false) override {
    return false;
  }

  eProsima_user_DllExport void *createData() override { return nullptr; }

  eProsima_user_DllExport void deleteData(void *data) override {}

  // Register TypeObject representation in Fast DDS TypeObjectRegistry
  eProsima_user_DllExport void register_type_object_representation() override {}

  MD5 m_md5;
  unsigned char *m_keyBuffer;
};
} // namespace utility

#endif // _PAYLOAD_PUB_SUB_TYPE_HPP_
