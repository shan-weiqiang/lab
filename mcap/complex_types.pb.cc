// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex_types.proto
// Protobuf C++ Version: 5.26.1

#include "complex_types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace complex {
      template <typename>
PROTOBUF_CONSTEXPR Vehicle_AttributesEntry_DoNotUse::Vehicle_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct Vehicle_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vehicle_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vehicle_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Vehicle_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vehicle_AttributesEntry_DoNotUseDefaultTypeInternal _Vehicle_AttributesEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SceneInfo_MetricsEntry_DoNotUse::SceneInfo_MetricsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct SceneInfo_MetricsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneInfo_MetricsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneInfo_MetricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SceneInfo_MetricsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneInfo_MetricsEntry_DoNotUseDefaultTypeInternal _SceneInfo_MetricsEntry_DoNotUse_default_instance_;

inline constexpr Point3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point3D::Point3D(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Point3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point3DDefaultTypeInternal _Point3D_default_instance_;

inline constexpr TrafficLight::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        remaining_time_{0},
        state_{static_cast< ::complex::TrafficLightState >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficLight::TrafficLight(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;

inline constexpr BoundingBox::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        min_point_{nullptr},
        max_point_{nullptr},
        confidence_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BoundingBox::BoundingBox(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BoundingBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundingBoxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundingBoxDefaultTypeInternal() {}
  union {
    BoundingBox _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;

inline constexpr Vehicle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        trajectory_{},
        attributes_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        velocity_{nullptr},
        bbox_{nullptr},
        type_{static_cast< ::complex::VehicleType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Vehicle::Vehicle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleDefaultTypeInternal() {}
  union {
    Vehicle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleDefaultTypeInternal _Vehicle_default_instance_;

inline constexpr SceneInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vehicles_{},
        traffic_lights_{},
        metrics_{},
        scene_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ego_position_{nullptr},
        ego_bbox_{nullptr},
        timestamp_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR SceneInfo::SceneInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SceneInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneInfoDefaultTypeInternal() {}
  union {
    SceneInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneInfoDefaultTypeInternal _SceneInfo_default_instance_;
}  // namespace complex
static ::_pb::Metadata file_level_metadata_complex_5ftypes_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_complex_5ftypes_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_complex_5ftypes_2eproto = nullptr;
const ::uint32_t
    TableStruct_complex_5ftypes_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::complex::Point3D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::Point3D, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::complex::Point3D, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::complex::Point3D, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::complex::BoundingBox, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complex::BoundingBox, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::BoundingBox, _impl_.min_point_),
        PROTOBUF_FIELD_OFFSET(::complex::BoundingBox, _impl_.max_point_),
        PROTOBUF_FIELD_OFFSET(::complex::BoundingBox, _impl_.confidence_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle_AttributesEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle_AttributesEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle_AttributesEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle_AttributesEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.velocity_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.bbox_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.trajectory_),
        PROTOBUF_FIELD_OFFSET(::complex::Vehicle, _impl_.attributes_),
        ~0u,
        ~0u,
        0,
        1,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::complex::TrafficLight, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complex::TrafficLight, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::TrafficLight, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::complex::TrafficLight, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::complex::TrafficLight, _impl_.remaining_time_),
        PROTOBUF_FIELD_OFFSET(::complex::TrafficLight, _impl_.position_),
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo_MetricsEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo_MetricsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo_MetricsEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo_MetricsEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.scene_id_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.vehicles_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.traffic_lights_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.ego_position_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.ego_bbox_),
        PROTOBUF_FIELD_OFFSET(::complex::SceneInfo, _impl_.metrics_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::complex::Point3D)},
        {11, 22, -1, sizeof(::complex::BoundingBox)},
        {25, 35, -1, sizeof(::complex::Vehicle_AttributesEntry_DoNotUse)},
        {37, 52, -1, sizeof(::complex::Vehicle)},
        {59, 71, -1, sizeof(::complex::TrafficLight)},
        {75, 85, -1, sizeof(::complex::SceneInfo_MetricsEntry_DoNotUse)},
        {87, 102, -1, sizeof(::complex::SceneInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::complex::_Point3D_default_instance_._instance,
    &::complex::_BoundingBox_default_instance_._instance,
    &::complex::_Vehicle_AttributesEntry_DoNotUse_default_instance_._instance,
    &::complex::_Vehicle_default_instance_._instance,
    &::complex::_TrafficLight_default_instance_._instance,
    &::complex::_SceneInfo_MetricsEntry_DoNotUse_default_instance_._instance,
    &::complex::_SceneInfo_default_instance_._instance,
};
const char descriptor_table_protodef_complex_5ftypes_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023complex_types.proto\022\007complex\"*\n\007Point3"
    "D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"k\n\013Bo"
    "undingBox\022#\n\tmin_point\030\001 \001(\0132\020.complex.P"
    "oint3D\022#\n\tmax_point\030\002 \001(\0132\020.complex.Poin"
    "t3D\022\022\n\nconfidence\030\003 \001(\001\"\264\002\n\007Vehicle\022\n\n\002i"
    "d\030\001 \001(\t\022\"\n\004type\030\002 \001(\0162\024.complex.VehicleT"
    "ype\022\"\n\010position\030\003 \001(\0132\020.complex.Point3D\022"
    "\"\n\010velocity\030\004 \001(\0132\020.complex.Point3D\022\"\n\004b"
    "box\030\005 \001(\0132\024.complex.BoundingBox\022$\n\ntraje"
    "ctory\030\006 \003(\0132\020.complex.Point3D\0224\n\nattribu"
    "tes\030\007 \003(\0132 .complex.Vehicle.AttributesEn"
    "try\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
    "alue\030\002 \001(\t:\0028\001\"\201\001\n\014TrafficLight\022\n\n\002id\030\001 "
    "\001(\t\022)\n\005state\030\002 \001(\0162\032.complex.TrafficLigh"
    "tState\022\026\n\016remaining_time\030\003 \001(\001\022\"\n\010positi"
    "on\030\004 \001(\0132\020.complex.Point3D\"\265\002\n\tSceneInfo"
    "\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010scene_id\030\002 \001(\t\022\"\n"
    "\010vehicles\030\003 \003(\0132\020.complex.Vehicle\022-\n\016tra"
    "ffic_lights\030\004 \003(\0132\025.complex.TrafficLight"
    "\022&\n\014ego_position\030\005 \001(\0132\020.complex.Point3D"
    "\022&\n\010ego_bbox\030\006 \001(\0132\024.complex.BoundingBox"
    "\0220\n\007metrics\030\007 \003(\0132\037.complex.SceneInfo.Me"
    "tricsEntry\032.\n\014MetricsEntry\022\013\n\003key\030\001 \001(\t\022"
    "\r\n\005value\030\002 \001(\001:\0028\001*[\n\013VehicleType\022\013\n\007UNK"
    "NOWN\020\000\022\007\n\003CAR\020\001\022\t\n\005TRUCK\020\002\022\016\n\nMOTORCYCLE"
    "\020\003\022\013\n\007BICYCLE\020\004\022\016\n\nPEDESTRIAN\020\005*F\n\021Traff"
    "icLightState\022\007\n\003RED\020\000\022\n\n\006YELLOW\020\001\022\t\n\005GRE"
    "EN\020\002\022\021\n\rUNKNOWN_LIGHT\020\003b\006proto3"
};
static ::absl::once_flag descriptor_table_complex_5ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_complex_5ftypes_2eproto = {
    false,
    false,
    1111,
    descriptor_table_protodef_complex_5ftypes_2eproto,
    "complex_types.proto",
    &descriptor_table_complex_5ftypes_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_complex_5ftypes_2eproto::offsets,
    file_level_metadata_complex_5ftypes_2eproto,
    file_level_enum_descriptors_complex_5ftypes_2eproto,
    file_level_service_descriptors_complex_5ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_complex_5ftypes_2eproto_getter() {
  return &descriptor_table_complex_5ftypes_2eproto;
}
namespace complex {
const ::google::protobuf::EnumDescriptor* VehicleType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto);
  return file_level_enum_descriptors_complex_5ftypes_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t VehicleType_internal_data_[] = {
    393216u, 0u, };
bool VehicleType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* TrafficLightState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto);
  return file_level_enum_descriptors_complex_5ftypes_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TrafficLightState_internal_data_[] = {
    262144u, 0u, };
bool TrafficLightState_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class Point3D::_Internal {
 public:
};

Point3D::Point3D(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complex.Point3D)
}
Point3D::Point3D(
    ::google::protobuf::Arena* arena, const Point3D& from)
    : Point3D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:complex.Point3D)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Point3D::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Point3D::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Point3D, _impl_._cached_size_),
              false,
          },
          &Point3D::MergeImpl,
          &Point3D::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.Point3D)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Point3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Point3D_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complex::Point3D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Point3D::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.Point3D)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.Point3D)
  return target;
}

::size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.Point3D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Point3D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Point3D*>(&to_msg);
  auto& from = static_cast<const Point3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:complex.Point3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)
      + sizeof(Point3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[0]);
}
// ===================================================================

class BoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundingBox>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_._has_bits_);
};

BoundingBox::BoundingBox(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complex.BoundingBox)
}
inline PROTOBUF_NDEBUG_INLINE BoundingBox::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BoundingBox::BoundingBox(
    ::google::protobuf::Arena* arena,
    const BoundingBox& from)
    : ::google::protobuf::Message(arena) {
  BoundingBox* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.min_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(
                              arena, *from._impl_.min_point_)
                        : nullptr;
  _impl_.max_point_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(
                              arena, *from._impl_.max_point_)
                        : nullptr;
  _impl_.confidence_ = from._impl_.confidence_;

  // @@protoc_insertion_point(copy_constructor:complex.BoundingBox)
}
inline PROTOBUF_NDEBUG_INLINE BoundingBox::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BoundingBox::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_point_),
           0,
           offsetof(Impl_, confidence_) -
               offsetof(Impl_, min_point_) +
               sizeof(Impl_::confidence_));
}
BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:complex.BoundingBox)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BoundingBox::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.min_point_;
  delete _impl_.max_point_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
BoundingBox::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_._cached_size_),
              false,
          },
          &BoundingBox::MergeImpl,
          &BoundingBox::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.BoundingBox)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.min_point_ != nullptr);
      _impl_.min_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.max_point_ != nullptr);
      _impl_.max_point_->Clear();
    }
  }
  _impl_.confidence_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> BoundingBox::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BoundingBox_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complex::BoundingBox>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .complex.Point3D min_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.min_point_)}},
    // .complex.Point3D max_point = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.max_point_)}},
    // double confidence = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .complex.Point3D min_point = 1;
    {PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.min_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .complex.Point3D max_point = 2;
    {PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.max_point_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double confidence = 3;
    {PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.confidence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
  }}, {{
  }},
};

::uint8_t* BoundingBox::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.BoundingBox)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .complex.Point3D min_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.min_point_, _impl_.min_point_->GetCachedSize(), target, stream);
  }

  // .complex.Point3D max_point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.max_point_, _impl_.max_point_->GetCachedSize(), target, stream);
  }

  // double confidence = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  ::uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.BoundingBox)
  return target;
}

::size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.BoundingBox)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .complex.Point3D min_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.min_point_);
    }

    // .complex.Point3D max_point = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.max_point_);
    }

  }
  // double confidence = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  ::uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void BoundingBox::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BoundingBox*>(&to_msg);
  auto& from = static_cast<const BoundingBox&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:complex.BoundingBox)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.min_point_ != nullptr);
      if (_this->_impl_.min_point_ == nullptr) {
        _this->_impl_.min_point_ =
            ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(arena, *from._impl_.min_point_);
      } else {
        _this->_impl_.min_point_->MergeFrom(*from._impl_.min_point_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.max_point_ != nullptr);
      if (_this->_impl_.max_point_ == nullptr) {
        _this->_impl_.max_point_ =
            ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(arena, *from._impl_.max_point_);
      } else {
        _this->_impl_.max_point_->MergeFrom(*from._impl_.max_point_);
      }
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  ::uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_impl_.confidence_ = from._impl_.confidence_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.confidence_)
      + sizeof(BoundingBox::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, _impl_.min_point_)>(
          reinterpret_cast<char*>(&_impl_.min_point_),
          reinterpret_cast<char*>(&other->_impl_.min_point_));
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[1]);
}
// ===================================================================

Vehicle_AttributesEntry_DoNotUse::Vehicle_AttributesEntry_DoNotUse() {}
Vehicle_AttributesEntry_DoNotUse::Vehicle_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata Vehicle_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[2]);
}
// ===================================================================

class Vehicle::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vehicle, _impl_._has_bits_);
};

Vehicle::Vehicle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complex.Vehicle)
}
inline PROTOBUF_NDEBUG_INLINE Vehicle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        trajectory_{visibility, arena, from.trajectory_},
        attributes_{visibility, arena, from.attributes_},
        id_(arena, from.id_) {}

Vehicle::Vehicle(
    ::google::protobuf::Arena* arena,
    const Vehicle& from)
    : ::google::protobuf::Message(arena) {
  Vehicle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(
                              arena, *from._impl_.velocity_)
                        : nullptr;
  _impl_.bbox_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::complex::BoundingBox>(
                              arena, *from._impl_.bbox_)
                        : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:complex.Vehicle)
}
inline PROTOBUF_NDEBUG_INLINE Vehicle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        trajectory_{visibility, arena},
        attributes_{visibility, arena},
        id_(arena) {}

inline void Vehicle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::type_));
}
Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:complex.Vehicle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vehicle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  delete _impl_.position_;
  delete _impl_.velocity_;
  delete _impl_.bbox_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Vehicle::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Vehicle, _impl_._cached_size_),
              false,
          },
          &Vehicle::MergeImpl,
          &Vehicle::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.Vehicle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_.Clear();
  _impl_.attributes_.Clear();
  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.bbox_ != nullptr);
      _impl_.bbox_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vehicle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 36, 2> Vehicle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Vehicle, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Vehicle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complex::Vehicle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.id_)}},
    // .complex.VehicleType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Vehicle, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.type_)}},
    // .complex.Point3D position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.position_)}},
    // .complex.Point3D velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.velocity_)}},
    // .complex.BoundingBox bbox = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.bbox_)}},
    // repeated .complex.Point3D trajectory = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 3, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.trajectory_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .complex.VehicleType type = 2;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .complex.Point3D position = 3;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .complex.Point3D velocity = 4;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .complex.BoundingBox bbox = 5;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.bbox_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .complex.Point3D trajectory = 6;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.trajectory_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, string> attributes = 7;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.attributes_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
    {::_pbi::TcParser::GetTable<::complex::BoundingBox>()},
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Vehicle()._impl_.attributes_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\17\2\0\0\0\0\0\12"
    "complex.Vehicle"
    "id"
    "attributes"
  }},
};

::uint8_t* Vehicle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.Vehicle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.Vehicle.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .complex.VehicleType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .complex.Point3D position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.position_, _impl_.position_->GetCachedSize(), target, stream);
  }

  // .complex.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.velocity_, _impl_.velocity_->GetCachedSize(), target, stream);
  }

  // .complex.BoundingBox bbox = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.bbox_, _impl_.bbox_->GetCachedSize(), target, stream);
  }

  // repeated .complex.Point3D trajectory = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_trajectory_size());
       i < n; i++) {
    const auto& repfield = this->_internal_trajectory().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // map<string, string> attributes = 7;
  if (!_internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.Vehicle.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.Vehicle.attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.Vehicle.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.Vehicle.attributes");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.Vehicle)
  return target;
}

::size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.Vehicle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .complex.Point3D trajectory = 6;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->_internal_trajectory()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<string, string> attributes = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_attributes_size());
  for (const auto& entry : _internal_attributes()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .complex.Point3D position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .complex.Point3D velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

    // .complex.BoundingBox bbox = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bbox_);
    }

  }
  // .complex.VehicleType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Vehicle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Vehicle*>(&to_msg);
  auto& from = static_cast<const Vehicle&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:complex.Vehicle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trajectory()->MergeFrom(
      from._internal_trajectory());
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.bbox_ != nullptr);
      if (_this->_impl_.bbox_ == nullptr) {
        _this->_impl_.bbox_ =
            ::google::protobuf::Message::CopyConstruct<::complex::BoundingBox>(arena, *from._impl_.bbox_);
      } else {
        _this->_impl_.bbox_->MergeFrom(*from._impl_.bbox_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::InternalSwap(Vehicle* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_.InternalSwap(&other->_impl_.trajectory_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.type_)
      + sizeof(Vehicle::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[3]);
}
// ===================================================================

class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_._has_bits_);
};

TrafficLight::TrafficLight(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complex.TrafficLight)
}
inline PROTOBUF_NDEBUG_INLINE TrafficLight::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_) {}

TrafficLight::TrafficLight(
    ::google::protobuf::Arena* arena,
    const TrafficLight& from)
    : ::google::protobuf::Message(arena) {
  TrafficLight* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, remaining_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, remaining_time_),
           offsetof(Impl_, state_) -
               offsetof(Impl_, remaining_time_) +
               sizeof(Impl_::state_));

  // @@protoc_insertion_point(copy_constructor:complex.TrafficLight)
}
inline PROTOBUF_NDEBUG_INLINE TrafficLight::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        id_(arena) {}

inline void TrafficLight::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, state_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::state_));
}
TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:complex.TrafficLight)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficLight::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  delete _impl_.position_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TrafficLight::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_._cached_size_),
              false,
          },
          &TrafficLight::MergeImpl,
          &TrafficLight::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.TrafficLight)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.remaining_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.remaining_time_)) + sizeof(_impl_.state_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 31, 2> TrafficLight::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrafficLight_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complex::TrafficLight>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .complex.Point3D position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.position_)}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.id_)}},
    // .complex.TrafficLightState state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficLight, _impl_.state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.state_)}},
    // double remaining_time = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.remaining_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .complex.TrafficLightState state = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double remaining_time = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.remaining_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .complex.Point3D position = 4;
    {PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
  }}, {{
    "\24\2\0\0\0\0\0\0"
    "complex.TrafficLight"
    "id"
  }},
};

::uint8_t* TrafficLight::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.TrafficLight)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.TrafficLight.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .complex.TrafficLightState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_state(), target);
  }

  // double remaining_time = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_remaining_time = this->_internal_remaining_time();
  ::uint64_t raw_remaining_time;
  memcpy(&raw_remaining_time, &tmp_remaining_time, sizeof(tmp_remaining_time));
  if (raw_remaining_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_remaining_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .complex.Point3D position = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.position_, _impl_.position_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.TrafficLight)
  return target;
}

::size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.TrafficLight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // .complex.Point3D position = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
  }

  // double remaining_time = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_remaining_time = this->_internal_remaining_time();
  ::uint64_t raw_remaining_time;
  memcpy(&raw_remaining_time, &tmp_remaining_time, sizeof(tmp_remaining_time));
  if (raw_remaining_time != 0) {
    total_size += 9;
  }

  // .complex.TrafficLightState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TrafficLight::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrafficLight*>(&to_msg);
  auto& from = static_cast<const TrafficLight&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:complex.TrafficLight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_remaining_time = from._internal_remaining_time();
  ::uint64_t raw_remaining_time;
  memcpy(&raw_remaining_time, &tmp_remaining_time, sizeof(tmp_remaining_time));
  if (raw_remaining_time != 0) {
    _this->_impl_.remaining_time_ = from._impl_.remaining_time_;
  }
  if (from._internal_state() != 0) {
    _this->_impl_.state_ = from._impl_.state_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.state_)
      + sizeof(TrafficLight::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[4]);
}
// ===================================================================

SceneInfo_MetricsEntry_DoNotUse::SceneInfo_MetricsEntry_DoNotUse() {}
SceneInfo_MetricsEntry_DoNotUse::SceneInfo_MetricsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata SceneInfo_MetricsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[5]);
}
// ===================================================================

class SceneInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SceneInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_._has_bits_);
};

SceneInfo::SceneInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complex.SceneInfo)
}
inline PROTOBUF_NDEBUG_INLINE SceneInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vehicles_{visibility, arena, from.vehicles_},
        traffic_lights_{visibility, arena, from.traffic_lights_},
        metrics_{visibility, arena, from.metrics_},
        scene_id_(arena, from.scene_id_) {}

SceneInfo::SceneInfo(
    ::google::protobuf::Arena* arena,
    const SceneInfo& from)
    : ::google::protobuf::Message(arena) {
  SceneInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ego_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(
                              arena, *from._impl_.ego_position_)
                        : nullptr;
  _impl_.ego_bbox_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::complex::BoundingBox>(
                              arena, *from._impl_.ego_bbox_)
                        : nullptr;
  _impl_.timestamp_ = from._impl_.timestamp_;

  // @@protoc_insertion_point(copy_constructor:complex.SceneInfo)
}
inline PROTOBUF_NDEBUG_INLINE SceneInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vehicles_{visibility, arena},
        traffic_lights_{visibility, arena},
        metrics_{visibility, arena},
        scene_id_(arena) {}

inline void SceneInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ego_position_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, ego_position_) +
               sizeof(Impl_::timestamp_));
}
SceneInfo::~SceneInfo() {
  // @@protoc_insertion_point(destructor:complex.SceneInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SceneInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.scene_id_.Destroy();
  delete _impl_.ego_position_;
  delete _impl_.ego_bbox_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SceneInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_._cached_size_),
              false,
          },
          &SceneInfo::MergeImpl,
          &SceneInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.SceneInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicles_.Clear();
  _impl_.traffic_lights_.Clear();
  _impl_.metrics_.Clear();
  _impl_.scene_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ego_position_ != nullptr);
      _impl_.ego_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ego_bbox_ != nullptr);
      _impl_.ego_bbox_->Clear();
    }
  }
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SceneInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 41, 2> SceneInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SceneInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complex::SceneInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SceneInfo, _impl_.timestamp_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.timestamp_)}},
    // string scene_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.scene_id_)}},
    // repeated .complex.Vehicle vehicles = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.vehicles_)}},
    // repeated .complex.TrafficLight traffic_lights = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.traffic_lights_)}},
    // .complex.Point3D ego_position = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 2, PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.ego_position_)}},
    // .complex.BoundingBox ego_bbox = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 3, PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.ego_bbox_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string scene_id = 2;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.scene_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .complex.Vehicle vehicles = 3;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.vehicles_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .complex.TrafficLight traffic_lights = 4;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.traffic_lights_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .complex.Point3D ego_position = 5;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.ego_position_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .complex.BoundingBox ego_bbox = 6;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.ego_bbox_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, double> metrics = 7;
    {PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.metrics_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::complex::Vehicle>()},
    {::_pbi::TcParser::GetTable<::complex::TrafficLight>()},
    {::_pbi::TcParser::GetTable<::complex::Point3D>()},
    {::_pbi::TcParser::GetTable<::complex::BoundingBox>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(SceneInfo()._impl_.metrics_)>(
        1, 0, 0, 9,
        1)},
  }}, {{
    "\21\0\10\0\0\0\0\7"
    "complex.SceneInfo"
    "scene_id"
    "metrics"
  }},
};

::uint8_t* SceneInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.SceneInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_timestamp(), target);
  }

  // string scene_id = 2;
  if (!this->_internal_scene_id().empty()) {
    const std::string& _s = this->_internal_scene_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.SceneInfo.scene_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .complex.Vehicle vehicles = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_vehicles_size());
       i < n; i++) {
    const auto& repfield = this->_internal_vehicles().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .complex.TrafficLight traffic_lights = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_traffic_lights_size());
       i < n; i++) {
    const auto& repfield = this->_internal_traffic_lights().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .complex.Point3D ego_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.ego_position_, _impl_.ego_position_->GetCachedSize(), target, stream);
  }

  // .complex.BoundingBox ego_bbox = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.ego_bbox_, _impl_.ego_bbox_->GetCachedSize(), target, stream);
  }

  // map<string, double> metrics = 7;
  if (!_internal_metrics().empty()) {
    using MapType = ::google::protobuf::Map<std::string, double>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_DOUBLE>;
    const auto& field = _internal_metrics();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.SceneInfo.metrics");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "complex.SceneInfo.metrics");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.SceneInfo)
  return target;
}

::size_t SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.SceneInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .complex.Vehicle vehicles = 3;
  total_size += 1UL * this->_internal_vehicles_size();
  for (const auto& msg : this->_internal_vehicles()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .complex.TrafficLight traffic_lights = 4;
  total_size += 1UL * this->_internal_traffic_lights_size();
  for (const auto& msg : this->_internal_traffic_lights()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<string, double> metrics = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_metrics_size());
  for (const auto& entry : _internal_metrics()) {
    total_size += _pbi::MapEntryFuncs<std::string, double,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
  }
  // string scene_id = 2;
  if (!this->_internal_scene_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_scene_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .complex.Point3D ego_position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ego_position_);
    }

    // .complex.BoundingBox ego_bbox = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ego_bbox_);
    }

  }
  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SceneInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SceneInfo*>(&to_msg);
  auto& from = static_cast<const SceneInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:complex.SceneInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vehicles()->MergeFrom(
      from._internal_vehicles());
  _this->_internal_mutable_traffic_lights()->MergeFrom(
      from._internal_traffic_lights());
  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  if (!from._internal_scene_id().empty()) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ego_position_ != nullptr);
      if (_this->_impl_.ego_position_ == nullptr) {
        _this->_impl_.ego_position_ =
            ::google::protobuf::Message::CopyConstruct<::complex::Point3D>(arena, *from._impl_.ego_position_);
      } else {
        _this->_impl_.ego_position_->MergeFrom(*from._impl_.ego_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ego_bbox_ != nullptr);
      if (_this->_impl_.ego_bbox_ == nullptr) {
        _this->_impl_.ego_bbox_ =
            ::google::protobuf::Message::CopyConstruct<::complex::BoundingBox>(arena, *from._impl_.ego_bbox_);
      } else {
        _this->_impl_.ego_bbox_->MergeFrom(*from._impl_.ego_bbox_);
      }
    }
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SceneInfo::CopyFrom(const SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SceneInfo::IsInitialized() const {
  return true;
}

void SceneInfo::InternalSwap(SceneInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vehicles_.InternalSwap(&other->_impl_.vehicles_);
  _impl_.traffic_lights_.InternalSwap(&other->_impl_.traffic_lights_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scene_id_, &other->_impl_.scene_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.timestamp_)
      + sizeof(SceneInfo::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(SceneInfo, _impl_.ego_position_)>(
          reinterpret_cast<char*>(&_impl_.ego_position_),
          reinterpret_cast<char*>(&other->_impl_.ego_position_));
}

::google::protobuf::Metadata SceneInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_complex_5ftypes_2eproto_getter,
                                   &descriptor_table_complex_5ftypes_2eproto_once,
                                   file_level_metadata_complex_5ftypes_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace complex
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_complex_5ftypes_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
