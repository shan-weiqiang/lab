// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex_types.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_complex_5ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_complex_5ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_complex_5ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_complex_5ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_complex_5ftypes_2eproto;
namespace complex {
class BoundingBox;
struct BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Point3D;
struct Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class SceneInfo;
struct SceneInfoDefaultTypeInternal;
extern SceneInfoDefaultTypeInternal _SceneInfo_default_instance_;
class SceneInfo_MetricsEntry_DoNotUse;
struct SceneInfo_MetricsEntry_DoNotUseDefaultTypeInternal;
extern SceneInfo_MetricsEntry_DoNotUseDefaultTypeInternal _SceneInfo_MetricsEntry_DoNotUse_default_instance_;
class TrafficLight;
struct TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class Vehicle;
struct VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
class Vehicle_AttributesEntry_DoNotUse;
struct Vehicle_AttributesEntry_DoNotUseDefaultTypeInternal;
extern Vehicle_AttributesEntry_DoNotUseDefaultTypeInternal _Vehicle_AttributesEntry_DoNotUse_default_instance_;
}  // namespace complex
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace complex {
enum VehicleType : int {
  UNKNOWN = 0,
  CAR = 1,
  TRUCK = 2,
  MOTORCYCLE = 3,
  BICYCLE = 4,
  PEDESTRIAN = 5,
  VehicleType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VehicleType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VehicleType_IsValid(int value);
extern const uint32_t VehicleType_internal_data_[];
constexpr VehicleType VehicleType_MIN = static_cast<VehicleType>(0);
constexpr VehicleType VehicleType_MAX = static_cast<VehicleType>(5);
constexpr int VehicleType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
VehicleType_descriptor();
template <typename T>
const std::string& VehicleType_Name(T value) {
  static_assert(std::is_same<T, VehicleType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VehicleType_Name().");
  return VehicleType_Name(static_cast<VehicleType>(value));
}
template <>
inline const std::string& VehicleType_Name(VehicleType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VehicleType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool VehicleType_Parse(absl::string_view name, VehicleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleType>(
      VehicleType_descriptor(), name, value);
}
enum TrafficLightState : int {
  RED = 0,
  YELLOW = 1,
  GREEN = 2,
  UNKNOWN_LIGHT = 3,
  TrafficLightState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrafficLightState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrafficLightState_IsValid(int value);
extern const uint32_t TrafficLightState_internal_data_[];
constexpr TrafficLightState TrafficLightState_MIN = static_cast<TrafficLightState>(0);
constexpr TrafficLightState TrafficLightState_MAX = static_cast<TrafficLightState>(3);
constexpr int TrafficLightState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TrafficLightState_descriptor();
template <typename T>
const std::string& TrafficLightState_Name(T value) {
  static_assert(std::is_same<T, TrafficLightState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrafficLightState_Name().");
  return TrafficLightState_Name(static_cast<TrafficLightState>(value));
}
template <>
inline const std::string& TrafficLightState_Name(TrafficLightState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrafficLightState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TrafficLightState_Parse(absl::string_view name, TrafficLightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightState>(
      TrafficLightState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vehicle_AttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Vehicle_AttributesEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Vehicle_AttributesEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Vehicle_AttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vehicle_AttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Vehicle_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Vehicle_AttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Vehicle_AttributesEntry_DoNotUse*>(
        &_Vehicle_AttributesEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "complex.Vehicle.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "complex.Vehicle.AttributesEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SceneInfo_MetricsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          SceneInfo_MetricsEntry_DoNotUse, std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      SceneInfo_MetricsEntry_DoNotUse, std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  SceneInfo_MetricsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SceneInfo_MetricsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SceneInfo_MetricsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SceneInfo_MetricsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SceneInfo_MetricsEntry_DoNotUse*>(
        &_SceneInfo_MetricsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "complex.SceneInfo.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Point3D final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complex.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {}
  ~Point3D() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Point3D(
      ::google::protobuf::internal::ConstantInitialized);

  inline Point3D(const Point3D& from) : Point3D(nullptr, from) {}
  inline Point3D(Point3D&& from) noexcept
      : Point3D(nullptr, std::move(from)) {}
  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
        &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Point3D& a, Point3D& b) { a.Swap(&b); }
  inline void Swap(Point3D* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Point3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Point3D& from) { Point3D::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Point3D* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complex.Point3D"; }

 protected:
  explicit Point3D(::google::protobuf::Arena* arena);
  Point3D(::google::protobuf::Arena* arena, const Point3D& from);
  Point3D(::google::protobuf::Arena* arena, Point3D&& from) noexcept
      : Point3D(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 3;
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // @@protoc_insertion_point(class_scope:complex.Point3D)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    double x_;
    double y_;
    double z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complex.TrafficLight) */ {
 public:
  inline TrafficLight() : TrafficLight(nullptr) {}
  ~TrafficLight() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficLight(
      ::google::protobuf::internal::ConstantInitialized);

  inline TrafficLight(const TrafficLight& from) : TrafficLight(nullptr, from) {}
  inline TrafficLight(TrafficLight&& from) noexcept
      : TrafficLight(nullptr, std::move(from)) {}
  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
        &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TrafficLight& a, TrafficLight& b) { a.Swap(&b); }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLight* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TrafficLight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficLight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrafficLight& from) { TrafficLight::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrafficLight* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complex.TrafficLight"; }

 protected:
  explicit TrafficLight(::google::protobuf::Arena* arena);
  TrafficLight(::google::protobuf::Arena* arena, const TrafficLight& from);
  TrafficLight(::google::protobuf::Arena* arena, TrafficLight&& from) noexcept
      : TrafficLight(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 4,
    kRemainingTimeFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .complex.Point3D position = 4;
  bool has_position() const;
  void clear_position() ;
  const ::complex::Point3D& position() const;
  PROTOBUF_NODISCARD ::complex::Point3D* release_position();
  ::complex::Point3D* mutable_position();
  void set_allocated_position(::complex::Point3D* value);
  void unsafe_arena_set_allocated_position(::complex::Point3D* value);
  ::complex::Point3D* unsafe_arena_release_position();

  private:
  const ::complex::Point3D& _internal_position() const;
  ::complex::Point3D* _internal_mutable_position();

  public:
  // double remaining_time = 3;
  void clear_remaining_time() ;
  double remaining_time() const;
  void set_remaining_time(double value);

  private:
  double _internal_remaining_time() const;
  void _internal_set_remaining_time(double value);

  public:
  // .complex.TrafficLightState state = 2;
  void clear_state() ;
  ::complex::TrafficLightState state() const;
  void set_state(::complex::TrafficLightState value);

  private:
  ::complex::TrafficLightState _internal_state() const;
  void _internal_set_state(::complex::TrafficLightState value);

  public:
  // @@protoc_insertion_point(class_scope:complex.TrafficLight)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::complex::Point3D* position_;
    double remaining_time_;
    int state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complex.BoundingBox) */ {
 public:
  inline BoundingBox() : BoundingBox(nullptr) {}
  ~BoundingBox() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BoundingBox(
      ::google::protobuf::internal::ConstantInitialized);

  inline BoundingBox(const BoundingBox& from) : BoundingBox(nullptr, from) {}
  inline BoundingBox(BoundingBox&& from) noexcept
      : BoundingBox(nullptr, std::move(from)) {}
  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
        &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BoundingBox& a, BoundingBox& b) { a.Swap(&b); }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BoundingBox>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoundingBox& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BoundingBox& from) { BoundingBox::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BoundingBox* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complex.BoundingBox"; }

 protected:
  explicit BoundingBox(::google::protobuf::Arena* arena);
  BoundingBox(::google::protobuf::Arena* arena, const BoundingBox& from);
  BoundingBox(::google::protobuf::Arena* arena, BoundingBox&& from) noexcept
      : BoundingBox(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMinPointFieldNumber = 1,
    kMaxPointFieldNumber = 2,
    kConfidenceFieldNumber = 3,
  };
  // .complex.Point3D min_point = 1;
  bool has_min_point() const;
  void clear_min_point() ;
  const ::complex::Point3D& min_point() const;
  PROTOBUF_NODISCARD ::complex::Point3D* release_min_point();
  ::complex::Point3D* mutable_min_point();
  void set_allocated_min_point(::complex::Point3D* value);
  void unsafe_arena_set_allocated_min_point(::complex::Point3D* value);
  ::complex::Point3D* unsafe_arena_release_min_point();

  private:
  const ::complex::Point3D& _internal_min_point() const;
  ::complex::Point3D* _internal_mutable_min_point();

  public:
  // .complex.Point3D max_point = 2;
  bool has_max_point() const;
  void clear_max_point() ;
  const ::complex::Point3D& max_point() const;
  PROTOBUF_NODISCARD ::complex::Point3D* release_max_point();
  ::complex::Point3D* mutable_max_point();
  void set_allocated_max_point(::complex::Point3D* value);
  void unsafe_arena_set_allocated_max_point(::complex::Point3D* value);
  ::complex::Point3D* unsafe_arena_release_max_point();

  private:
  const ::complex::Point3D& _internal_max_point() const;
  ::complex::Point3D* _internal_mutable_max_point();

  public:
  // double confidence = 3;
  void clear_confidence() ;
  double confidence() const;
  void set_confidence(double value);

  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);

  public:
  // @@protoc_insertion_point(class_scope:complex.BoundingBox)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::complex::Point3D* min_point_;
    ::complex::Point3D* max_point_;
    double confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Vehicle final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complex.Vehicle) */ {
 public:
  inline Vehicle() : Vehicle(nullptr) {}
  ~Vehicle() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vehicle(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vehicle(const Vehicle& from) : Vehicle(nullptr, from) {}
  inline Vehicle(Vehicle&& from) noexcept
      : Vehicle(nullptr, std::move(from)) {}
  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vehicle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
        &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Vehicle& a, Vehicle& b) { a.Swap(&b); }
  inline void Swap(Vehicle* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vehicle* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Vehicle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vehicle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vehicle& from) { Vehicle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Vehicle* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complex.Vehicle"; }

 protected:
  explicit Vehicle(::google::protobuf::Arena* arena);
  Vehicle(::google::protobuf::Arena* arena, const Vehicle& from);
  Vehicle(::google::protobuf::Arena* arena, Vehicle&& from) noexcept
      : Vehicle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTrajectoryFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kIdFieldNumber = 1,
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kBboxFieldNumber = 5,
    kTypeFieldNumber = 2,
  };
  // repeated .complex.Point3D trajectory = 6;
  int trajectory_size() const;
  private:
  int _internal_trajectory_size() const;

  public:
  void clear_trajectory() ;
  ::complex::Point3D* mutable_trajectory(int index);
  ::google::protobuf::RepeatedPtrField<::complex::Point3D>* mutable_trajectory();

  private:
  const ::google::protobuf::RepeatedPtrField<::complex::Point3D>& _internal_trajectory() const;
  ::google::protobuf::RepeatedPtrField<::complex::Point3D>* _internal_mutable_trajectory();
  public:
  const ::complex::Point3D& trajectory(int index) const;
  ::complex::Point3D* add_trajectory();
  const ::google::protobuf::RepeatedPtrField<::complex::Point3D>& trajectory() const;
  // map<string, string> attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& attributes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_attributes();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .complex.Point3D position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::complex::Point3D& position() const;
  PROTOBUF_NODISCARD ::complex::Point3D* release_position();
  ::complex::Point3D* mutable_position();
  void set_allocated_position(::complex::Point3D* value);
  void unsafe_arena_set_allocated_position(::complex::Point3D* value);
  ::complex::Point3D* unsafe_arena_release_position();

  private:
  const ::complex::Point3D& _internal_position() const;
  ::complex::Point3D* _internal_mutable_position();

  public:
  // .complex.Point3D velocity = 4;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::complex::Point3D& velocity() const;
  PROTOBUF_NODISCARD ::complex::Point3D* release_velocity();
  ::complex::Point3D* mutable_velocity();
  void set_allocated_velocity(::complex::Point3D* value);
  void unsafe_arena_set_allocated_velocity(::complex::Point3D* value);
  ::complex::Point3D* unsafe_arena_release_velocity();

  private:
  const ::complex::Point3D& _internal_velocity() const;
  ::complex::Point3D* _internal_mutable_velocity();

  public:
  // .complex.BoundingBox bbox = 5;
  bool has_bbox() const;
  void clear_bbox() ;
  const ::complex::BoundingBox& bbox() const;
  PROTOBUF_NODISCARD ::complex::BoundingBox* release_bbox();
  ::complex::BoundingBox* mutable_bbox();
  void set_allocated_bbox(::complex::BoundingBox* value);
  void unsafe_arena_set_allocated_bbox(::complex::BoundingBox* value);
  ::complex::BoundingBox* unsafe_arena_release_bbox();

  private:
  const ::complex::BoundingBox& _internal_bbox() const;
  ::complex::BoundingBox* _internal_mutable_bbox();

  public:
  // .complex.VehicleType type = 2;
  void clear_type() ;
  ::complex::VehicleType type() const;
  void set_type(::complex::VehicleType value);

  private:
  ::complex::VehicleType _internal_type() const;
  void _internal_set_type(::complex::VehicleType value);

  public:
  // @@protoc_insertion_point(class_scope:complex.Vehicle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::complex::Point3D > trajectory_;
    ::google::protobuf::internal::MapField<Vehicle_AttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        attributes_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::complex::Point3D* position_;
    ::complex::Point3D* velocity_;
    ::complex::BoundingBox* bbox_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SceneInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complex.SceneInfo) */ {
 public:
  inline SceneInfo() : SceneInfo(nullptr) {}
  ~SceneInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SceneInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline SceneInfo(const SceneInfo& from) : SceneInfo(nullptr, from) {}
  inline SceneInfo(SceneInfo&& from) noexcept
      : SceneInfo(nullptr, std::move(from)) {}
  inline SceneInfo& operator=(const SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneInfo& operator=(SceneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SceneInfo*>(
        &_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SceneInfo& a, SceneInfo& b) { a.Swap(&b); }
  inline void Swap(SceneInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SceneInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SceneInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SceneInfo& from) { SceneInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SceneInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complex.SceneInfo"; }

 protected:
  explicit SceneInfo(::google::protobuf::Arena* arena);
  SceneInfo(::google::protobuf::Arena* arena, const SceneInfo& from);
  SceneInfo(::google::protobuf::Arena* arena, SceneInfo&& from) noexcept
      : SceneInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVehiclesFieldNumber = 3,
    kTrafficLightsFieldNumber = 4,
    kMetricsFieldNumber = 7,
    kSceneIdFieldNumber = 2,
    kEgoPositionFieldNumber = 5,
    kEgoBboxFieldNumber = 6,
    kTimestampFieldNumber = 1,
  };
  // repeated .complex.Vehicle vehicles = 3;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;

  public:
  void clear_vehicles() ;
  ::complex::Vehicle* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField<::complex::Vehicle>* mutable_vehicles();

  private:
  const ::google::protobuf::RepeatedPtrField<::complex::Vehicle>& _internal_vehicles() const;
  ::google::protobuf::RepeatedPtrField<::complex::Vehicle>* _internal_mutable_vehicles();
  public:
  const ::complex::Vehicle& vehicles(int index) const;
  ::complex::Vehicle* add_vehicles();
  const ::google::protobuf::RepeatedPtrField<::complex::Vehicle>& vehicles() const;
  // repeated .complex.TrafficLight traffic_lights = 4;
  int traffic_lights_size() const;
  private:
  int _internal_traffic_lights_size() const;

  public:
  void clear_traffic_lights() ;
  ::complex::TrafficLight* mutable_traffic_lights(int index);
  ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>* mutable_traffic_lights();

  private:
  const ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>& _internal_traffic_lights() const;
  ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>* _internal_mutable_traffic_lights();
  public:
  const ::complex::TrafficLight& traffic_lights(int index) const;
  ::complex::TrafficLight* add_traffic_lights();
  const ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>& traffic_lights() const;
  // map<string, double> metrics = 7;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  const ::google::protobuf::Map<std::string, double>& metrics() const;
  ::google::protobuf::Map<std::string, double>* mutable_metrics();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_metrics() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_metrics();

  public:
  // string scene_id = 2;
  void clear_scene_id() ;
  const std::string& scene_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scene_id(Arg_&& arg, Args_... args);
  std::string* mutable_scene_id();
  PROTOBUF_NODISCARD std::string* release_scene_id();
  void set_allocated_scene_id(std::string* value);

  private:
  const std::string& _internal_scene_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene_id(
      const std::string& value);
  std::string* _internal_mutable_scene_id();

  public:
  // .complex.Point3D ego_position = 5;
  bool has_ego_position() const;
  void clear_ego_position() ;
  const ::complex::Point3D& ego_position() const;
  PROTOBUF_NODISCARD ::complex::Point3D* release_ego_position();
  ::complex::Point3D* mutable_ego_position();
  void set_allocated_ego_position(::complex::Point3D* value);
  void unsafe_arena_set_allocated_ego_position(::complex::Point3D* value);
  ::complex::Point3D* unsafe_arena_release_ego_position();

  private:
  const ::complex::Point3D& _internal_ego_position() const;
  ::complex::Point3D* _internal_mutable_ego_position();

  public:
  // .complex.BoundingBox ego_bbox = 6;
  bool has_ego_bbox() const;
  void clear_ego_bbox() ;
  const ::complex::BoundingBox& ego_bbox() const;
  PROTOBUF_NODISCARD ::complex::BoundingBox* release_ego_bbox();
  ::complex::BoundingBox* mutable_ego_bbox();
  void set_allocated_ego_bbox(::complex::BoundingBox* value);
  void unsafe_arena_set_allocated_ego_bbox(::complex::BoundingBox* value);
  ::complex::BoundingBox* unsafe_arena_release_ego_bbox();

  private:
  const ::complex::BoundingBox& _internal_ego_bbox() const;
  ::complex::BoundingBox* _internal_mutable_ego_bbox();

  public:
  // uint64 timestamp = 1;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:complex.SceneInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::complex::Vehicle > vehicles_;
    ::google::protobuf::RepeatedPtrField< ::complex::TrafficLight > traffic_lights_;
    ::google::protobuf::internal::MapField<SceneInfo_MetricsEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        metrics_;
    ::google::protobuf::internal::ArenaStringPtr scene_id_;
    ::complex::Point3D* ego_position_;
    ::complex::BoundingBox* ego_bbox_;
    ::uint64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_complex_5ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Point3D

// double x = 1;
inline void Point3D::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:complex.Point3D.x)
  return _internal_x();
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:complex.Point3D.x)
}
inline double Point3D::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Point3D::_internal_set_x(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = value;
}

// double y = 2;
inline void Point3D::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:complex.Point3D.y)
  return _internal_y();
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:complex.Point3D.y)
}
inline double Point3D::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Point3D::_internal_set_y(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = value;
}

// double z = 3;
inline void Point3D::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:complex.Point3D.z)
  return _internal_z();
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:complex.Point3D.z)
}
inline double Point3D::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Point3D::_internal_set_z(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// BoundingBox

// .complex.Point3D min_point = 1;
inline bool BoundingBox::has_min_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_point_ != nullptr);
  return value;
}
inline void BoundingBox::clear_min_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_point_ != nullptr) _impl_.min_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::complex::Point3D& BoundingBox::_internal_min_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::Point3D* p = _impl_.min_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::Point3D&>(::complex::_Point3D_default_instance_);
}
inline const ::complex::Point3D& BoundingBox::min_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.BoundingBox.min_point)
  return _internal_min_point();
}
inline void BoundingBox::unsafe_arena_set_allocated_min_point(::complex::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_point_);
  }
  _impl_.min_point_ = reinterpret_cast<::complex::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.BoundingBox.min_point)
}
inline ::complex::Point3D* BoundingBox::release_min_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* released = _impl_.min_point_;
  _impl_.min_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::Point3D* BoundingBox::unsafe_arena_release_min_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.BoundingBox.min_point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* temp = _impl_.min_point_;
  _impl_.min_point_ = nullptr;
  return temp;
}
inline ::complex::Point3D* BoundingBox::_internal_mutable_min_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.min_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::Point3D>(GetArena());
    _impl_.min_point_ = reinterpret_cast<::complex::Point3D*>(p);
  }
  return _impl_.min_point_;
}
inline ::complex::Point3D* BoundingBox::mutable_min_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::complex::Point3D* _msg = _internal_mutable_min_point();
  // @@protoc_insertion_point(field_mutable:complex.BoundingBox.min_point)
  return _msg;
}
inline void BoundingBox::set_allocated_min_point(::complex::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.min_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.min_point_ = reinterpret_cast<::complex::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.BoundingBox.min_point)
}

// .complex.Point3D max_point = 2;
inline bool BoundingBox::has_max_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_point_ != nullptr);
  return value;
}
inline void BoundingBox::clear_max_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.max_point_ != nullptr) _impl_.max_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::complex::Point3D& BoundingBox::_internal_max_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::Point3D* p = _impl_.max_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::Point3D&>(::complex::_Point3D_default_instance_);
}
inline const ::complex::Point3D& BoundingBox::max_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.BoundingBox.max_point)
  return _internal_max_point();
}
inline void BoundingBox::unsafe_arena_set_allocated_max_point(::complex::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_point_);
  }
  _impl_.max_point_ = reinterpret_cast<::complex::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.BoundingBox.max_point)
}
inline ::complex::Point3D* BoundingBox::release_max_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::complex::Point3D* released = _impl_.max_point_;
  _impl_.max_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::Point3D* BoundingBox::unsafe_arena_release_max_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.BoundingBox.max_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::complex::Point3D* temp = _impl_.max_point_;
  _impl_.max_point_ = nullptr;
  return temp;
}
inline ::complex::Point3D* BoundingBox::_internal_mutable_max_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.max_point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::Point3D>(GetArena());
    _impl_.max_point_ = reinterpret_cast<::complex::Point3D*>(p);
  }
  return _impl_.max_point_;
}
inline ::complex::Point3D* BoundingBox::mutable_max_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::complex::Point3D* _msg = _internal_mutable_max_point();
  // @@protoc_insertion_point(field_mutable:complex.BoundingBox.max_point)
  return _msg;
}
inline void BoundingBox::set_allocated_max_point(::complex::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.max_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.max_point_ = reinterpret_cast<::complex::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.BoundingBox.max_point)
}

// double confidence = 3;
inline void BoundingBox::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.confidence_ = 0;
}
inline double BoundingBox::confidence() const {
  // @@protoc_insertion_point(field_get:complex.BoundingBox.confidence)
  return _internal_confidence();
}
inline void BoundingBox::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:complex.BoundingBox.confidence)
}
inline double BoundingBox::_internal_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.confidence_;
}
inline void BoundingBox::_internal_set_confidence(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Vehicle

// string id = 1;
inline void Vehicle::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Vehicle::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.Vehicle.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vehicle::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:complex.Vehicle.id)
}
inline std::string* Vehicle::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:complex.Vehicle.id)
  return _s;
}
inline const std::string& Vehicle::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Vehicle::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Vehicle::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Vehicle::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.Vehicle.id)
  return _impl_.id_.Release();
}
inline void Vehicle::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:complex.Vehicle.id)
}

// .complex.VehicleType type = 2;
inline void Vehicle::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::complex::VehicleType Vehicle::type() const {
  // @@protoc_insertion_point(field_get:complex.Vehicle.type)
  return _internal_type();
}
inline void Vehicle::set_type(::complex::VehicleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:complex.Vehicle.type)
}
inline ::complex::VehicleType Vehicle::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::complex::VehicleType>(_impl_.type_);
}
inline void Vehicle::_internal_set_type(::complex::VehicleType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// .complex.Point3D position = 3;
inline bool Vehicle::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void Vehicle::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::complex::Point3D& Vehicle::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::Point3D&>(::complex::_Point3D_default_instance_);
}
inline const ::complex::Point3D& Vehicle::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.Vehicle.position)
  return _internal_position();
}
inline void Vehicle::unsafe_arena_set_allocated_position(::complex::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::complex::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.Vehicle.position)
}
inline ::complex::Point3D* Vehicle::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::Point3D* Vehicle::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.Vehicle.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::complex::Point3D* Vehicle::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::Point3D>(GetArena());
    _impl_.position_ = reinterpret_cast<::complex::Point3D*>(p);
  }
  return _impl_.position_;
}
inline ::complex::Point3D* Vehicle::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::complex::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:complex.Vehicle.position)
  return _msg;
}
inline void Vehicle::set_allocated_position(::complex::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::complex::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.Vehicle.position)
}

// .complex.Point3D velocity = 4;
inline bool Vehicle::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void Vehicle::clear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::complex::Point3D& Vehicle::_internal_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::Point3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::Point3D&>(::complex::_Point3D_default_instance_);
}
inline const ::complex::Point3D& Vehicle::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.Vehicle.velocity)
  return _internal_velocity();
}
inline void Vehicle::unsafe_arena_set_allocated_velocity(::complex::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::complex::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.Vehicle.velocity)
}
inline ::complex::Point3D* Vehicle::release_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::complex::Point3D* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::Point3D* Vehicle::unsafe_arena_release_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.Vehicle.velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::complex::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::complex::Point3D* Vehicle::_internal_mutable_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::Point3D>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::complex::Point3D*>(p);
  }
  return _impl_.velocity_;
}
inline ::complex::Point3D* Vehicle::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::complex::Point3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:complex.Vehicle.velocity)
  return _msg;
}
inline void Vehicle::set_allocated_velocity(::complex::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.velocity_ = reinterpret_cast<::complex::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.Vehicle.velocity)
}

// .complex.BoundingBox bbox = 5;
inline bool Vehicle::has_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_ != nullptr);
  return value;
}
inline void Vehicle::clear_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bbox_ != nullptr) _impl_.bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::complex::BoundingBox& Vehicle::_internal_bbox() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::BoundingBox* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::BoundingBox&>(::complex::_BoundingBox_default_instance_);
}
inline const ::complex::BoundingBox& Vehicle::bbox() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.Vehicle.bbox)
  return _internal_bbox();
}
inline void Vehicle::unsafe_arena_set_allocated_bbox(::complex::BoundingBox* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = reinterpret_cast<::complex::BoundingBox*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.Vehicle.bbox)
}
inline ::complex::BoundingBox* Vehicle::release_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::complex::BoundingBox* released = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::BoundingBox* Vehicle::unsafe_arena_release_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.Vehicle.bbox)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::complex::BoundingBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::complex::BoundingBox* Vehicle::_internal_mutable_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bbox_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::BoundingBox>(GetArena());
    _impl_.bbox_ = reinterpret_cast<::complex::BoundingBox*>(p);
  }
  return _impl_.bbox_;
}
inline ::complex::BoundingBox* Vehicle::mutable_bbox() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::complex::BoundingBox* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:complex.Vehicle.bbox)
  return _msg;
}
inline void Vehicle::set_allocated_bbox(::complex::BoundingBox* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.bbox_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.bbox_ = reinterpret_cast<::complex::BoundingBox*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.Vehicle.bbox)
}

// repeated .complex.Point3D trajectory = 6;
inline int Vehicle::_internal_trajectory_size() const {
  return _internal_trajectory().size();
}
inline int Vehicle::trajectory_size() const {
  return _internal_trajectory_size();
}
inline void Vehicle::clear_trajectory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trajectory_.Clear();
}
inline ::complex::Point3D* Vehicle::mutable_trajectory(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:complex.Vehicle.trajectory)
  return _internal_mutable_trajectory()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::complex::Point3D>* Vehicle::mutable_trajectory()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:complex.Vehicle.trajectory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_trajectory();
}
inline const ::complex::Point3D& Vehicle::trajectory(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.Vehicle.trajectory)
  return _internal_trajectory().Get(index);
}
inline ::complex::Point3D* Vehicle::add_trajectory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::complex::Point3D* _add = _internal_mutable_trajectory()->Add();
  // @@protoc_insertion_point(field_add:complex.Vehicle.trajectory)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::complex::Point3D>& Vehicle::trajectory() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:complex.Vehicle.trajectory)
  return _internal_trajectory();
}
inline const ::google::protobuf::RepeatedPtrField<::complex::Point3D>&
Vehicle::_internal_trajectory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trajectory_;
}
inline ::google::protobuf::RepeatedPtrField<::complex::Point3D>*
Vehicle::_internal_mutable_trajectory() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.trajectory_;
}

// map<string, string> attributes = 7;
inline int Vehicle::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int Vehicle::attributes_size() const {
  return _internal_attributes_size();
}
inline void Vehicle::clear_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Vehicle::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Vehicle::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:complex.Vehicle.attributes)
  return _internal_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* Vehicle::_internal_mutable_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Vehicle::mutable_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:complex.Vehicle.attributes)
  return _internal_mutable_attributes();
}

// -------------------------------------------------------------------

// TrafficLight

// string id = 1;
inline void TrafficLight::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TrafficLight::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.TrafficLight.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrafficLight::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:complex.TrafficLight.id)
}
inline std::string* TrafficLight::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:complex.TrafficLight.id)
  return _s;
}
inline const std::string& TrafficLight::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void TrafficLight::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* TrafficLight::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* TrafficLight::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.TrafficLight.id)
  return _impl_.id_.Release();
}
inline void TrafficLight::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:complex.TrafficLight.id)
}

// .complex.TrafficLightState state = 2;
inline void TrafficLight::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_ = 0;
}
inline ::complex::TrafficLightState TrafficLight::state() const {
  // @@protoc_insertion_point(field_get:complex.TrafficLight.state)
  return _internal_state();
}
inline void TrafficLight::set_state(::complex::TrafficLightState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:complex.TrafficLight.state)
}
inline ::complex::TrafficLightState TrafficLight::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::complex::TrafficLightState>(_impl_.state_);
}
inline void TrafficLight::_internal_set_state(::complex::TrafficLightState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_ = value;
}

// double remaining_time = 3;
inline void TrafficLight::clear_remaining_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remaining_time_ = 0;
}
inline double TrafficLight::remaining_time() const {
  // @@protoc_insertion_point(field_get:complex.TrafficLight.remaining_time)
  return _internal_remaining_time();
}
inline void TrafficLight::set_remaining_time(double value) {
  _internal_set_remaining_time(value);
  // @@protoc_insertion_point(field_set:complex.TrafficLight.remaining_time)
}
inline double TrafficLight::_internal_remaining_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remaining_time_;
}
inline void TrafficLight::_internal_set_remaining_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remaining_time_ = value;
}

// .complex.Point3D position = 4;
inline bool TrafficLight::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void TrafficLight::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::complex::Point3D& TrafficLight::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::Point3D&>(::complex::_Point3D_default_instance_);
}
inline const ::complex::Point3D& TrafficLight::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.TrafficLight.position)
  return _internal_position();
}
inline void TrafficLight::unsafe_arena_set_allocated_position(::complex::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::complex::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.TrafficLight.position)
}
inline ::complex::Point3D* TrafficLight::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::Point3D* TrafficLight::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.TrafficLight.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::complex::Point3D* TrafficLight::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::Point3D>(GetArena());
    _impl_.position_ = reinterpret_cast<::complex::Point3D*>(p);
  }
  return _impl_.position_;
}
inline ::complex::Point3D* TrafficLight::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::complex::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:complex.TrafficLight.position)
  return _msg;
}
inline void TrafficLight::set_allocated_position(::complex::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::complex::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.TrafficLight.position)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SceneInfo

// uint64 timestamp = 1;
inline void SceneInfo::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SceneInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:complex.SceneInfo.timestamp)
  return _internal_timestamp();
}
inline void SceneInfo::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:complex.SceneInfo.timestamp)
}
inline ::uint64_t SceneInfo::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void SceneInfo::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = value;
}

// string scene_id = 2;
inline void SceneInfo::clear_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_id_.ClearToEmpty();
}
inline const std::string& SceneInfo::scene_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.SceneInfo.scene_id)
  return _internal_scene_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SceneInfo::set_scene_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:complex.SceneInfo.scene_id)
}
inline std::string* SceneInfo::mutable_scene_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scene_id();
  // @@protoc_insertion_point(field_mutable:complex.SceneInfo.scene_id)
  return _s;
}
inline const std::string& SceneInfo::_internal_scene_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scene_id_.Get();
}
inline void SceneInfo::_internal_set_scene_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_id_.Set(value, GetArena());
}
inline std::string* SceneInfo::_internal_mutable_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.scene_id_.Mutable( GetArena());
}
inline std::string* SceneInfo::release_scene_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.SceneInfo.scene_id)
  return _impl_.scene_id_.Release();
}
inline void SceneInfo::set_allocated_scene_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scene_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scene_id_.IsDefault()) {
          _impl_.scene_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:complex.SceneInfo.scene_id)
}

// repeated .complex.Vehicle vehicles = 3;
inline int SceneInfo::_internal_vehicles_size() const {
  return _internal_vehicles().size();
}
inline int SceneInfo::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void SceneInfo::clear_vehicles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vehicles_.Clear();
}
inline ::complex::Vehicle* SceneInfo::mutable_vehicles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:complex.SceneInfo.vehicles)
  return _internal_mutable_vehicles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::complex::Vehicle>* SceneInfo::mutable_vehicles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:complex.SceneInfo.vehicles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vehicles();
}
inline const ::complex::Vehicle& SceneInfo::vehicles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.SceneInfo.vehicles)
  return _internal_vehicles().Get(index);
}
inline ::complex::Vehicle* SceneInfo::add_vehicles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::complex::Vehicle* _add = _internal_mutable_vehicles()->Add();
  // @@protoc_insertion_point(field_add:complex.SceneInfo.vehicles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::complex::Vehicle>& SceneInfo::vehicles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:complex.SceneInfo.vehicles)
  return _internal_vehicles();
}
inline const ::google::protobuf::RepeatedPtrField<::complex::Vehicle>&
SceneInfo::_internal_vehicles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vehicles_;
}
inline ::google::protobuf::RepeatedPtrField<::complex::Vehicle>*
SceneInfo::_internal_mutable_vehicles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vehicles_;
}

// repeated .complex.TrafficLight traffic_lights = 4;
inline int SceneInfo::_internal_traffic_lights_size() const {
  return _internal_traffic_lights().size();
}
inline int SceneInfo::traffic_lights_size() const {
  return _internal_traffic_lights_size();
}
inline void SceneInfo::clear_traffic_lights() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.traffic_lights_.Clear();
}
inline ::complex::TrafficLight* SceneInfo::mutable_traffic_lights(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:complex.SceneInfo.traffic_lights)
  return _internal_mutable_traffic_lights()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>* SceneInfo::mutable_traffic_lights()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:complex.SceneInfo.traffic_lights)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_traffic_lights();
}
inline const ::complex::TrafficLight& SceneInfo::traffic_lights(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.SceneInfo.traffic_lights)
  return _internal_traffic_lights().Get(index);
}
inline ::complex::TrafficLight* SceneInfo::add_traffic_lights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::complex::TrafficLight* _add = _internal_mutable_traffic_lights()->Add();
  // @@protoc_insertion_point(field_add:complex.SceneInfo.traffic_lights)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>& SceneInfo::traffic_lights() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:complex.SceneInfo.traffic_lights)
  return _internal_traffic_lights();
}
inline const ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>&
SceneInfo::_internal_traffic_lights() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.traffic_lights_;
}
inline ::google::protobuf::RepeatedPtrField<::complex::TrafficLight>*
SceneInfo::_internal_mutable_traffic_lights() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.traffic_lights_;
}

// .complex.Point3D ego_position = 5;
inline bool SceneInfo::has_ego_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ego_position_ != nullptr);
  return value;
}
inline void SceneInfo::clear_ego_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ego_position_ != nullptr) _impl_.ego_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::complex::Point3D& SceneInfo::_internal_ego_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::Point3D* p = _impl_.ego_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::Point3D&>(::complex::_Point3D_default_instance_);
}
inline const ::complex::Point3D& SceneInfo::ego_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.SceneInfo.ego_position)
  return _internal_ego_position();
}
inline void SceneInfo::unsafe_arena_set_allocated_ego_position(::complex::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ego_position_);
  }
  _impl_.ego_position_ = reinterpret_cast<::complex::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.SceneInfo.ego_position)
}
inline ::complex::Point3D* SceneInfo::release_ego_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* released = _impl_.ego_position_;
  _impl_.ego_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::Point3D* SceneInfo::unsafe_arena_release_ego_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.SceneInfo.ego_position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complex::Point3D* temp = _impl_.ego_position_;
  _impl_.ego_position_ = nullptr;
  return temp;
}
inline ::complex::Point3D* SceneInfo::_internal_mutable_ego_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ego_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::Point3D>(GetArena());
    _impl_.ego_position_ = reinterpret_cast<::complex::Point3D*>(p);
  }
  return _impl_.ego_position_;
}
inline ::complex::Point3D* SceneInfo::mutable_ego_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::complex::Point3D* _msg = _internal_mutable_ego_position();
  // @@protoc_insertion_point(field_mutable:complex.SceneInfo.ego_position)
  return _msg;
}
inline void SceneInfo::set_allocated_ego_position(::complex::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.ego_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ego_position_ = reinterpret_cast<::complex::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.SceneInfo.ego_position)
}

// .complex.BoundingBox ego_bbox = 6;
inline bool SceneInfo::has_ego_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ego_bbox_ != nullptr);
  return value;
}
inline void SceneInfo::clear_ego_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ego_bbox_ != nullptr) _impl_.ego_bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::complex::BoundingBox& SceneInfo::_internal_ego_bbox() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complex::BoundingBox* p = _impl_.ego_bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::complex::BoundingBox&>(::complex::_BoundingBox_default_instance_);
}
inline const ::complex::BoundingBox& SceneInfo::ego_bbox() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complex.SceneInfo.ego_bbox)
  return _internal_ego_bbox();
}
inline void SceneInfo::unsafe_arena_set_allocated_ego_bbox(::complex::BoundingBox* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ego_bbox_);
  }
  _impl_.ego_bbox_ = reinterpret_cast<::complex::BoundingBox*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complex.SceneInfo.ego_bbox)
}
inline ::complex::BoundingBox* SceneInfo::release_ego_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::complex::BoundingBox* released = _impl_.ego_bbox_;
  _impl_.ego_bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complex::BoundingBox* SceneInfo::unsafe_arena_release_ego_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complex.SceneInfo.ego_bbox)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::complex::BoundingBox* temp = _impl_.ego_bbox_;
  _impl_.ego_bbox_ = nullptr;
  return temp;
}
inline ::complex::BoundingBox* SceneInfo::_internal_mutable_ego_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ego_bbox_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complex::BoundingBox>(GetArena());
    _impl_.ego_bbox_ = reinterpret_cast<::complex::BoundingBox*>(p);
  }
  return _impl_.ego_bbox_;
}
inline ::complex::BoundingBox* SceneInfo::mutable_ego_bbox() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::complex::BoundingBox* _msg = _internal_mutable_ego_bbox();
  // @@protoc_insertion_point(field_mutable:complex.SceneInfo.ego_bbox)
  return _msg;
}
inline void SceneInfo::set_allocated_ego_bbox(::complex::BoundingBox* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.ego_bbox_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ego_bbox_ = reinterpret_cast<::complex::BoundingBox*>(value);
  // @@protoc_insertion_point(field_set_allocated:complex.SceneInfo.ego_bbox)
}

// map<string, double> metrics = 7;
inline int SceneInfo::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int SceneInfo::metrics_size() const {
  return _internal_metrics_size();
}
inline void SceneInfo::clear_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metrics_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& SceneInfo::_internal_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metrics_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& SceneInfo::metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:complex.SceneInfo.metrics)
  return _internal_metrics();
}
inline ::google::protobuf::Map<std::string, double>* SceneInfo::_internal_mutable_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metrics_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* SceneInfo::mutable_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:complex.SceneInfo.metrics)
  return _internal_mutable_metrics();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace complex


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::complex::VehicleType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::complex::VehicleType>() {
  return ::complex::VehicleType_descriptor();
}
template <>
struct is_proto_enum<::complex::TrafficLightState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::complex::TrafficLightState>() {
  return ::complex::TrafficLightState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_complex_5ftypes_2eproto_2epb_2eh
